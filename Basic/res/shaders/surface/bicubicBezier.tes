#version 430 core


uniform mat4 mm;
uniform mat4 vm;
uniform mat4 pm;



//TES options
layout(isolines, equal_spacing) in;

in gl_PerVertex
{
  vec4 gl_Position;
  float gl_PointSize;
  float gl_ClipDistance[];
} input_from_TCS[];

//Built-in inputs
in vec3 gl_TessCoord[];
//Each TessCoord received is of the form <x,y> where x is 0, and y is on [0,1].
//We'll be using y as our curve parameter input

in int gl_PatchVerticesIn[];
in int gl_PrimitiveID[];

//Built-in outputs
out gl_PerVertex {
  vec4 gl_Position;
  float gl_PointSize;
  float gl_ClipDistance[];
};

void main()
{ 
  float t = gl_TessCoord[0].x;
  vec4 parameter = vec4(1, t, t*t, t*t*t);
  
  mat4 positionMatrix;
  for(int i = 0; i != 4; ++i){
    positionMatrix[i] = input_from_TCS[i].gl_Position;
  }
  
  mat4 bezier;
  bezier[0][0] = 1;
  bezier[1][0] = -3;
  bezier[2][0] = 3;
  bezier[3][0] = -1;
  bezier[1][1] = 3;
  bezier[2][1] = -6;
  bezier[3][1] = 3;
  bezier[2][2] = 3;
  bezier[3][2] = -3;
  bezier[3][3] = 1;
  
  gl_Position = positionMatrix * bezier * parameter;
  //gl_Position = vec4(gl_TessCoord[0].x,gl_TessCoord[0].x,gl_TessCoord[0].x,1.0);
  gl_Position = pm*vm*mm*gl_Position;
}